// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presistense.Data;

#nullable disable

namespace Presistense.Data.Migrations
{
    [DbContext(typeof(MetroDbContex))]
    [Migration("20251007124144_FixCascadePath")]
    partial class FixCascadePath
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Modules.Chatbot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("chatbots");
                });

            modelBuilder.Entity("Domain.Modules.CongestionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CongestionLevel")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationNameId");

                    b.ToTable("CongestionSchedules");
                });

            modelBuilder.Entity("Domain.Modules.Faults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("Domain.Modules.Line_Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Line_Names");
                });

            modelBuilder.Entity("Domain.Modules.Rush_Times", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Station_NameId")
                        .HasColumnType("int");

                    b.Property<int>("congestionLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("Station_NameId");

                    b.ToTable("Rush_Times");
                });

            modelBuilder.Entity("Domain.Modules.Station_Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<int?>("Line_NameId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Line_NameId");

                    b.HasIndex("StationId")
                        .IsUnique();

                    b.ToTable("Station_Coordinates");
                });

            modelBuilder.Entity("Domain.Modules.Station_Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Station_Names");
                });

            modelBuilder.Entity("Domain.Modules.Stations_Lines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("StationId");

                    b.ToTable("Stations_Lines");
                });

            modelBuilder.Entity("Domain.Modules.Ticket_Prices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StationsNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ticket_Prices");
                });

            modelBuilder.Entity("Domain.Modules.CongestionSchedule", b =>
                {
                    b.HasOne("Domain.Modules.Station_Name", "StationName")
                        .WithMany()
                        .HasForeignKey("StationNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StationName");
                });

            modelBuilder.Entity("Domain.Modules.Faults", b =>
                {
                    b.HasOne("Domain.Modules.Line_Name", "Line")
                        .WithMany("Faults")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Domain.Modules.Rush_Times", b =>
                {
                    b.HasOne("Domain.Modules.Stations_Lines", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Modules.Station_Name", "Station_Name")
                        .WithMany()
                        .HasForeignKey("Station_NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station_Name");
                });

            modelBuilder.Entity("Domain.Modules.Station_Coordinates", b =>
                {
                    b.HasOne("Domain.Modules.Line_Name", null)
                        .WithMany("CongestionSchedules")
                        .HasForeignKey("Line_NameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Modules.Station_Name", "Station")
                        .WithOne("Coordinates")
                        .HasForeignKey("Domain.Modules.Station_Coordinates", "StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Modules.Stations_Lines", b =>
                {
                    b.HasOne("Domain.Modules.Line_Name", "Line")
                        .WithMany("StationsLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Modules.Station_Name", "Station")
                        .WithMany("StationsLines")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Modules.Line_Name", b =>
                {
                    b.Navigation("CongestionSchedules");

                    b.Navigation("Faults");

                    b.Navigation("StationsLines");
                });

            modelBuilder.Entity("Domain.Modules.Station_Name", b =>
                {
                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("StationsLines");
                });
#pragma warning restore 612, 618
        }
    }
}
